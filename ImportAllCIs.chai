// Executed by the scheduler, runs in SOAP-based context.
include("CommonFunctions")

def ParseCIType(strNodeRole) {
	var result;
	var tableId = Ext.TableId("TSM_CONFIG_ITEMS");
	switch (strNodeRole) {
		case("server") {
			result = GetSelectionValueTSID(tableId, "ISSUETYPE", "Server");
			break;
		}
		case ("desktop") {
			result = GetSelectionValueTSID(tableId, "ISSUETYPE", "Workstation");
			break;
		}
		case ("virtualized_system") {
			result = GetSelectionValueTSID(tableId, "ISSUETYPE", "Server");
			break;
		}
		case ("graphics_adapter") {
			result = GetSelectionValueTSID(tableId, "ISSUETYPE", "Hardware");
			break;
		}
		case ("network_adapter") {
			result = GetSelectionValueTSID(tableId, "ISSUETYPE", "Hardware");
			break;
		}
		case ("memory_unit") {
			result = GetSelectionValueTSID(tableId, "ISSUETYPE", "Memory");
			break;
		}
		case ("installed_software") {
			result = GetSelectionValueTSID(tableId, "ISSUETYPE", "Software");
			break;
		}
		case ("cpu") {
			result = GetSelectionValueTSID(tableId, "ISSUETYPE", "Processor");
			break;
		}
		case ("interface") {
			result = GetSelectionValueTSID(tableId, "ISSUETYPE", "Hardware");
			break;
		}
		case ("hardware_board") {
			result = GetSelectionValueTSID(tableId, "ISSUETYPE", "Hardware");
			break;
		}
		case ("usb_device") {
			result = GetSelectionValueTSID(tableId, "ISSUETYPE", "Hardware");
			break;
		}
		default {
			result = GetSelectionValueTSID(tableId, "ISSUETYPE", "Unknown");
			break;
		}
	}
	return result;
}

def GetCIID(strUCMDBID) {
	var sbmId;
	var objToFind = Ext.CreateAppRecord(Ext.TableId("TSM_CONFIG_ITEMS"));
	
	if(objToFind.ReadByColumn("GEN_EXTRNL_ASSET_ID", strUCMDBID)) {
		sbmId = objToFind.GetId();
	} else {
		sbmId = -1;
	}
	
	return sbmId;
}

var objCMDBRecordList = Ext.CreateAppRecordList(Ext.TableId("TSM_CONFIG_ITEMS"));
var objCIRelationshipsList = Ext.CreateAppRecordList(Ext.TableId("TSM_RELATIONSHIPS"));
// Create object to hold the configuration objects
var objIntegrationConfigurations = Ext.CreateAppRecordList(Ext.TableId("USR_CMDB_INTEGRATIONS"));
// To-Do: Create function to dynamically pull selection TS_IDs based on text and field ID.
objIntegrationConfigurations.ReadByColumn("ISSUETYPE", GetSelectionValueTSID(Ext.TableId("USR_CMDB_INTEGRATIONS"), "ISSUETYPE", "UCMDB"));
for (objIntegrationConfig : objIntegrationConfigurations) {
	var objUCMDBEndpoint;
	// Identify where to get the URL	
	if (objIntegrationConfig.GetFieldValue("INTEGRATION_POINT") == GetSelectionValueTSID(Ext.TableId("USR_CMDB_INTEGRATIONS"), "INTEGRATION_POINT", "REST Data Source")) {
		// Create object to hold the RESTDataSource we will use for communication.
		objUCMDBEndpoint = Ext.CreateAppRecord(Ext.TableId("TS_RESTDATASOURCE"));
		// Load the object the Endpoint Definition called out in the configuration.
		objUCMDBEndpoint.Read(objIntegrationConfig.GetFieldValue("INTEGRATION_URL"));
	} else {
		Ext.LogErrorMsg("Non-Endpoint definitions are not configured yet.");
		break;
	}

	var strUsername = objIntegrationConfig.GetFieldValueString("USERNAME");
	var strPassword = objIntegrationConfig.GetFieldValueString("PASSWORD");
	var response = "";
	// Perform authentication
	var pathParams = ["rest-api", "authenticate"];
	var postBody = ["username":strUsername,
 			   "password":strPassword,
			   "clientContext":1].to_json();

	// check outputHeaders for token expiration?
	if (objUCMDBEndpoint.Post(response,postBody,[],pathParams)) {
		Ext.LogInfoMsg(response);
	} else {
		Ext.LogErrorMsg("There was an error." + Shell.GetLastErrorMessage());
		continue;
	}

	// Store the token 	
	var resultObj = from_json(response);
	var authToken = "Bearer ${resultObj["token"]}";
	response = " ";
	// Now construct the request body for executing the TQL.
	// "sbmproxy-" needs to be added to all headers that are to be passed along to the CMDB system. DEF315591
	var headers = [Pair("sbmproxy-Authorization", authToken)];
	pathParams = ["rest-api","topology"];
	postBody = "SSM Computer Population with Relationships 1.0";

	if (objUCMDBEndpoint.Post(response,postBody,[Nothing],pathParams,headers)) {
		Ext.LogInfoMsg("Request successful." + response.substr(0,50));
	} else {
		Ext.LogErrorMsg("There was an error." + Shell.GetLastErrorMessage());
		continue;
	}
	// Check for existing values
	resultObj = from_json(response);
	var i = 0;
	// Create the CI records returned.
	for (ci : resultObj["cis"]) {
		var continueProcessing = true;
		i = i+1;
		print("Begin Processing of item #" + i + ".");
		// Set CI Title to name of the UCMDB item.
		// Check for existence of properties block. If we don't have any properties, we're going to skip this item.
		// Begin processing the items; First, check the type.
		/*
		if ci.at("type" != "running_sftware")){
			// Since this a node, we need a a properties block to continue processing.
			if (ci.count("properties") == 1) {
				// Check for the name property. This is required, otherwise we won't process this item.
				if (ci.at("properties").count("name") != 1) {
					continueProcessing = false;
				}
				// We need the node role to set the Item Type of the record in SSM.
				if (ci.at("properties").count("node_role") != 1) {
					continueProcessing = false;
				}
		} else if ( {
			if (ci.

		} else {
			continueProcessing = false;
		}
		*/
		
		// Now check if there is a duplicate record already in the CMDB.
		objCMDBRecordList.ReadByColumn("GEN_EXTRNL_ASSET_ID", ci.at("ucmdbId"));
		if (objCMDBRecordList.Count() > 0) {
			// We found an existing record; do not process this.
			continueProcessing = false;
			print("Found an existing record.");
		}
		if (continueProcessing == true) {
			var objCIToSubmit = Ext.CreateProjectBasedRecord(Ext.TableId("TSM_CONFIG_ITEMS"));
			objCIToSubmit.SetFieldValue("TITLE", ci.at("properties").at("display_label"));
			objCIToSubmit.SetFieldValue("GEN_EXTRNL_ASSET_ID", ci.at("ucmdbId"));
			objCIToSubmit.SetFieldValue("GEN_EXTRNL_SOR", "UCMDB");
			objCIToSubmit.SetFieldValue("GEN_CONFIGURATION_MANAGER", Shell.User().GetId());
			objCIToSubmit.SetFieldValue("GEN_CONFIGURATION_ANALYST", Shell.User().GetId());
			var issueType;
			if (ci.at("type").to_string() == "nt" || ci.at("type").to_string() == "unix") {
				issueType = ParseCIType(ci.at("properties").at("node_role").front());
				if (ci.at("properties").count("primary_dns_name") == 1) {
					objCIToSubmit.SetFieldValue("GEN_FQDN", ci.at("properties").at("primary_dns_name").to_string());
				}
				if (ci.at("properties").count("discovered_vendor") == 1) {
					objCIToSubmit.SetFieldValue("GEN_MANUFACTURER_TXT", ci.at("properties").at("discovered_vendor").to_string());
				}
				if (ci.at("properties").count("memory_size") == 1) {
					objCIToSubmit.SetFieldValue("MCN_MEMORY_SIZE", ci.at("properties").at("memory_size").to_string());
				}
				if (ci.at("properties").count("name") == 1) {
					objCIToSubmit.SetFieldValue("GEN_HOST_NAME", ci.at("properties").at("name").to_string());
				}
				if (ci.at("properties").count("discovered_os_name") == 1) {
					objCIToSubmit.SetFieldValue("MCN_OPERATING_SYSTEM", ci.at("properties").at("discovered_os_name").to_string());
				}
			} else {
				issueType = ParseCIType(ci.at("type").to_string());
			}
			objCIToSubmit.SetFieldValue("ISSUETYPE", issueType); // Check values .count() == 1 (returns 1 if there, 0 if not)
			
			if (objCIToSubmit.QuickSubmitToProject("TSM_CONFIG_ITEMS.CONFIGURATION_ITEMS")) {
				print("Item Submitted for object #" + i + " - UCMDB ID: " + ci.at("ucmdbId"));
			} else {
				print("Failed submit for object #" + i);
			
			}
		} 
	}

// Now process the relationships and create those.
	i = 0;
	for (relationship : resultObj["relations"]) {
		++i;
		print("Processing relationship #" + i + " - " + relationship.at("ucmdbId"));
		var continueProcessing = true;
		// Check for an existing relationship record.
		objCIRelationshipsList.ReadByColumn("TITLE", relationship.at("ucmdbId"));
		if (objCIRelationshipsList.Count() > 0) {
			// We found this relationship record. do not process.
			print("We found an existing record. Do not process.");
			continueProcessing = false;
		}
		
		// Check the CI records and make sure they exist in our CMDB first.
		var parentCI = GetCIID(relationship.at("end1Id"));
		print("Parent CI TS_ID: " + parentCI);
		var childCI = GetCIID(relationship.at("end2Id"));
		print("Child CI TS_ID: " + childCI);
		if (childCI == -1 || parentCI == -1) {
			continueProcessing = false;
		}
		
		if (continueProcessing) {
			var objRelationshipToCreate = Ext.CreateAppRecord(Ext.TableId("TSM_RELATIONSHIPS"));
			objRelationshipToCreate.SetFieldValue("TITLE", relationship.at("ucmdbId"));
			objRelationshipToCreate.SetFieldValue("RELATIONSHIP_TYPE", GetAppRecordIDByTitle(Ext.TableId("TSM_RELATIONSHIP_TYPES"), "CM Integration Based Relationship").to_string());
			objRelationshipToCreate.SetFieldValue("PARENT_CI", parentCI.to_string());
			objRelationshipToCreate.SetFieldValue("CHILD_CI", childCI.to_string());
			var success = objRelationshipToCreate.Add();
			if (success == 0) {
				print("Failed to add relationship record. - " + relationship.at("ucmdbId"));
			}
		}
	}
}
// from json
// objects create map
// array create vector
